"""
FastAPI router for Manim animation generation endpoints.
"""

import logging
from fastapi import APIRouter, HTTPException
from fastapi.responses import FileResponse

from .models import (
    ManimGenerateRequest,
    ManimGenerateResponse,
)
from .service import ManimService

logger = logging.getLogger(__name__)

# Create router with prefix
router = APIRouter(
    prefix="/manim",
    tags=["manim"],
    responses={404: {"description": "Not found"}},
)

# Initialize service
manim_service = ManimService()


@router.post("/generate", response_model=ManimGenerateResponse)
async def generate_animation(request: ManimGenerateRequest):
    """
    Generate a Manim animation from a mathematical concept or LaTeX expression.
    
    This endpoint accepts a concept (text or LaTeX) and generates an animated
    video visualization using Manim. It supports:
    - AI-powered generation using Llama models via OpenRouter
    - Multiple render quality options (low, medium, high)
    """
    try:
        # Generate the animation
        result = await manim_service.render_animation(
            concept=request.concept,
            quality=request.quality,
        )
        
        # Convert the result to response model
        return ManimGenerateResponse(**result)
        
    except Exception as e:
        logger.error(f"Error generating animation: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to generate animation: {str(e)}"
        )

@router.get("/videos/{filename}")
async def serve_video(filename: str):
    """
    Serve a generated video file.
    
    This endpoint serves the MP4 video files generated by the Manim service.
    """
    try:
        # Validate filename (basic security check)
        if "/" in filename or "\\" in filename or ".." in filename:
            raise HTTPException(status_code=400, detail="Invalid filename")
        
        # Check if file exists
        video_path = manim_service.videos_dir / filename
        if not video_path.exists():
            raise HTTPException(status_code=404, detail="Video not found")
        
        # Return the video file
        return FileResponse(
            path=str(video_path),
            media_type="video/mp4",
            filename=filename
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error serving video {filename}: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to serve video: {str(e)}"
        )


@router.get("/health")
async def health_check():
    """
    Health check endpoint for the Manim service.
    
    Verifies that the service is running and required directories exist.
    """
    try:
        # Check if required directories exist
        if not manim_service.videos_dir.exists():
            return {
                "status": "unhealthy",
                "message": "Videos directory not found"
            }
        
        if not manim_service.temp_dir.exists():
            return {
                "status": "unhealthy",
                "message": "Temp directory not found"
            }
        
        return {
            "status": "healthy",
            "message": "Manim service is running",
            "directories": {
                "videos": str(manim_service.videos_dir),
                "temp": str(manim_service.temp_dir),
                "media": str(manim_service.media_dir)
            }
        }
        
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        return {
            "status": "unhealthy",
            "message": f"Health check failed: {str(e)}"
        }