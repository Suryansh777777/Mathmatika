/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/manim/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Animation
         * @description Generate a Manim animation from a mathematical concept or LaTeX expression.
         *
         *     This endpoint accepts a concept (text or LaTeX) and generates an animated
         *     video visualization using Manim. It supports:
         *     - AI-powered generation using Llama models via OpenRouter
         *     - Multiple render quality options (low, medium, high)
         */
        post: operations["generate_animation_manim_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manim/videos/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Video
         * @description Serve a generated video file.
         *
         *     This endpoint serves the MP4 video files generated by the Manim service.
         */
        get: operations["serve_video_manim_videos__filename__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manim/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint for the Manim service.
         *
         *     Verifies that the service is running and required directories exist.
         */
        get: operations["health_check_manim_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat Stream
         * @description Streaming chat endpoint with conversation history
         *
         *     - Accepts user message and conversation history
         *     - Streams AI responses in real-time using SSE
         *     - Maintains context across conversation turns
         *     - Uses Cerebras LLM for fast inference
         */
        post: operations["chat_stream_chat_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Research Topic
         * @description Basic research with AI synthesis
         *
         *     - Searches 5 web sources
         *     - Returns 2-3 sentence summary
         *     - Provides 3 key insights
         */
        post: operations["research_topic_research__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/deep": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deeper Research Topic
         * @description Two-layer research for better depth
         *
         *     - Layer 1: Initial search (6 sources)
         *     - AI identifies follow-up question
         *     - Layer 2: Follow-up search (4 sources)
         *     - Final synthesis with depth analysis
         */
        post: operations["deeper_research_topic_research_deep_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/multi-agent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Multi Agent Research
         * @description Multi-agent research with parallel execution
         *
         *     - Lead agent decomposes query into 3 subtasks
         *     - 3 specialized subagents work in parallel
         *     - Each subagent searches 2 sources
         *     - Lead agent synthesizes all findings
         *     - Returns executive summary and integrated insights
         */
        post: operations["multi_agent_research_research_multi_agent_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ChatMessage */
        ChatMessage: {
            /**
             * Role
             * @description Message role: 'user', 'assistant', or 'system'
             */
            role: string;
            /**
             * Content
             * @description Message content
             */
            content: string;
        };
        /** ChatRequest */
        ChatRequest: {
            /**
             * Message
             * @description User message
             */
            message: string;
            /**
             * Conversation History
             * @description Previous conversation messages for context
             */
            conversation_history?: components["schemas"]["ChatMessage"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ManimGenerateRequest
         * @description Request model for generating Manim animations.
         */
        ManimGenerateRequest: {
            /**
             * Concept
             * @description Mathematical concept or LaTeX expression to animate
             * @example pythagorean theorem
             * @example \frac{d}{dx}(x^2) = 2x
             * @example 3D surface plot
             */
            concept: string;
            /**
             * Quality
             * @description Render quality for the animation
             * @default low
             * @enum {string}
             */
            quality: "low" | "medium" | "high";
        };
        /**
         * ManimGenerateResponse
         * @description Response model for Manim animation generation.
         */
        ManimGenerateResponse: {
            /**
             * Success
             * @description Whether the animation was successfully generated
             */
            success: boolean;
            /**
             * Video Url
             * @description URL path to the generated video file
             */
            video_url?: string | null;
            /**
             * Code
             * @description The Manim Python code that was executed
             */
            code?: string | null;
            /**
             * Used Ai
             * @description Whether AI was used to generate the code
             * @default false
             */
            used_ai: boolean;
            /**
             * Render Quality
             * @description The quality level used for rendering
             */
            render_quality: string;
            /**
             * Error
             * @description Error message if generation failed
             */
            error?: string | null;
            /**
             * Details
             * @description Additional error details if available
             */
            details?: string | null;
        };
        /** MultiAgentResearchResponse */
        MultiAgentResearchResponse: {
            /** Query */
            query: string;
            /** Subagents */
            subagents: number;
            /** Total Sources */
            total_sources: number;
            /** Synthesis */
            synthesis: string;
        };
        /** ResearchRequest */
        ResearchRequest: {
            /**
             * Query
             * @description Research query or question
             */
            query: string;
        };
        /** ResearchResponse */
        ResearchResponse: {
            /** Query */
            query: string;
            /** Sources */
            sources: number;
            /** Response */
            response: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generate_animation_manim_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ManimGenerateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManimGenerateResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_video_manim_videos__filename__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_manim_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    chat_stream_chat_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    research_topic_research__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deeper_research_topic_research_deep_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    multi_agent_research_research_multi_agent_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiAgentResearchResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
